<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" label="SearchTest" creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			import mx.collections.ArrayCollection;
			import flash.filesystem.File;
			import mx.controls.Alert;
			
			private var currentNodes:Array = []; // The nodes (files and directories) in the current directory
			private var directoryStack:Array = []; // An array of directories (File objects) to search.
			private var currentSubdirectories:Array; // An array of directories in the current directory.
			private var nodeCount:uint = 0; // The number of files and directories searched.
			[Bindable]
			private var resultData:ArrayCollection = new ArrayCollection(); 
											// A collection of object with data pertaining to matching files
			private var pattern:RegExp; // The pattern to search for in file (and directory) names
			
			/**
			* Called when the application UI is rendered. The method sets the 
			* default folder path to be the user's documents directory. It also 
			* adjusts the window size and makes it visible.
			*/
			private function init():void 
			{
				folderPath.text=File.documentsDirectory.nativePath;
				stage.nativeWindow.width = Math.min(800, Capabilities.screenResolutionX - 40);
				stage.nativeWindow.height = Capabilities.screenResolutionY - 40;
				stage.nativeWindow.visible = true;
			}
			
			/**
			* Invoked when the user clicks the Search button. This method initiates the search
			* by building a RegExp pattern based on the searchString text value, and then checking
			* to see if the specified directory exists. If the directory does not exist, an error
			* message is displayed; otherwise, the method calls the listDirectoryAsync() method of the
			* dir object (that points to the directory). The directoryListing event handler processes
			* the directory contents for this directory.
			*/
			private function search():void 
			{
				resultData = new ArrayCollection();
				var patternString:String = searchString.text.replace(/\./g, "\\.");
				patternString = patternString.replace(/\*/g, ".*");
				patternString = patternString.replace(/\?/g, ".");
				pattern = new RegExp(patternString, "i");
				var dir:File = new File(folderPath.text);
				if (!dir.isDirectory)
				{
					Alert.show("Invalid directory path.", "Error");
				}
				else
				{
					dir.addEventListener(FileListEvent.DIRECTORY_LISTING, dirListed);
					dir.getDirectoryListingAsync();
					progress.visible = true;
				}
			}
			/**
			* Processes the directory contents for this directory, iterating through each node (file or
			* directory) to see if its name matches the Search pattern. Directories are added to the 
			* currentSubdirectories array, which is later added to the directoryStack. After examining
			* all of the nodes, the method then invokes the listDirectoryAsync() method of the next directory
			* in the directoryStack stack.
			*/	
			private function dirListed(event:FileListEvent):void 
			{
				currentNodes = event.files;
				currentSubdirectories = [];
				nodeCount += currentNodes.length;
				progress.label = "Files and folders searched: " + nodeCount;
				var node:File;
				var fileExtension:String;
				for (var i:int = 0; i < currentNodes.length; i++) 
				{
					node = currentNodes[i];
					if (node.isDirectory) 
					{
						currentSubdirectories.push(currentNodes[i]);
					}
					if (node.name.search(pattern) > -1) 
					{
						if (node.isDirectory) 
						{
							fileExtension = "";
						}
						else
						{
							fileExtension = node.name.substr(node.name.lastIndexOf(".") + 1);
						}
						var newData:Object = {name:node.name,
											  path:node.nativePath,
											  type:fileExtension}
						resultData.addItem(newData);
					}
				}
				for (i = currentSubdirectories.length - 1; i > -1; i--) 
				{
					directoryStack.push(currentSubdirectories[i]);
				} 
				var dir:File = directoryStack.pop();
				if (dir == null) {
					progress.visible = false; // There are no further directories to search. The search is completed.
				} else {
					dir.addEventListener(FileListEvent.DIRECTORY_LISTING, dirListed);
					dir.getDirectoryListingAsync();
				}
			}
		 ]]>
	</mx:Script>
	<mx:HBox width="100%">
		<mx:Label text="Folder to search:" />
		<mx:TextInput id="folderPath" width="100%"/>
	</mx:HBox>
	<mx:HBox width="100%">
		<mx:Label text="Search for:" />
		<mx:TextInput id="searchString" width="100%" text="mxmlc.exe" enter="search()" />
		<mx:Button label="Search" click="search()" />
	</mx:HBox>
	<mx:DataGrid id="resultsGrid" dataProvider="{resultData}" width="100%" height="100%">
		<mx:columns>
			<mx:DataGridColumn dataField="name" headerText="Name"/>
			<mx:DataGridColumn dataField="type" headerText="Type" width="60"/>
			<mx:DataGridColumn dataField="path" headerText="Path"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:ProgressBar id="progress"  visible="false" indeterminate="true" />
	
</mx:VBox>
